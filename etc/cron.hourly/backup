#!/bin/bash

DATE=$(date +%Y-%m-%dT%H)
DEST_BASE="/data/backup/sys-w20/archives/${DATE}"
DEST_HOME='10.0.0.240::/backup/sys-w20/home'
BACKUP_SSH_PORT=4829
TMP_BASE='/dev/shm/backup'
CLEAR_ARCHIVES_AFTER_DAYS=3
CLEAR_HOME_AFTER=1W

rm -rf "${TMP_BASE}"
mkdir -p "${DEST_BASE}" "${TMP_BASE}"

# -------------------------------
echo '(1) Update and commit the workstation state (and make a synced backup)'
DEST_WS="${DEST_BASE}/workstation.tar.gz"
TMP_WS="${TMP_BASE}/workstation.tar.gz"

# Run the update and system syncing
make -C /data/workstation update commit >/dev/null

# Create the backup archive
time (
  tar --acls --xattrs -cpf - /data/workstation \
    2> >(grep -iP 'socket ignored|removing leading') \
    | pigz -p 32 > "${TMP_WS}" \
)

# -------------------------------
echo '(2) Create the /etc backup'
DEST_ETC="${DEST_BASE}/etc.tar.gz"
TMP_ETC="${TMP_BASE}/etc.tar.gz"

# Add a permission/ownership fixing script
find /etc -exec stat --printf 'chmod %#a %n\nchown %U:%G %n\n' {} + \
  > /etc/fix-permissions.sh
chmod +x /etc/fix-permissions.sh

# Create the backup archive
time (
  tar --acls --xattrs -cpf - /etc \
    2> >(grep -iP 'socket ignored|removing leading') \
    | pigz -p 32 > "${TMP_ETC}"
)

# -------------------------------
echo '(3) Create the /root backup'
DEST_ROOT="${DEST_BASE}/root.tar.gz"
TMP_ROOT="${TMP_BASE}/root.tar.gz"

# Create the backup archive
time (
  tar --acls --xattrs -cpf - /root \
    2> >(grep -iP 'socket ignored|removing leading') \
    | pigz -p 32 > "${TMP_ROOT}"
)

# -------------------------------
echo '(4) Create backup checksums'
DEST_CHK="${DEST_BASE}/checksums"
TMP_CHK="${TMP_BASE}/checksums"

# Create a checksum file
sha512sum "${TMP_WS}" >> "${TMP_CHK}"
sha512sum "${TMP_ETC}" >> "${TMP_CHK}"
sha512sum "${TMP_ROOT}" >> "${TMP_CHK}"
sed -i "s#${TMP_BASE}/##g" "${TMP_CHK}"

# Move the archive to the e5 server
mv "${TMP_WS}" "${DEST_WS}"
mv "${TMP_ETC}" "${DEST_ETC}"
mv "${TMP_ROOT}" "${DEST_ROOT}"
mv "${TMP_CHK}" "${DEST_CHK}"

# -------------------------------
echo '(5) Clear old backups'
DEST=$(dirname "${DEST_BASE}")
find "${DEST}" -type f \
  -mtime +${CLEAR_ARCHIVES_AFTER_DAYS} -execdir rm -- '{}' \;
find "${DEST}" -type d -empty -delete

# -------------------------------
echo '(6) Create the /home backup'
time (
  RDIFF_BACKUP_VERBOSITY=8 \
  rdiff-backup \
    --remote-schema "ssh -C -p${BACKUP_SSH_PORT} %s rdiff-backup --server" \
    --exclude '/home/jack/.vagrant.d' \
    --exclude '/home/jack/VirtualBox VMs' \
    --exclude '/home/jack/.local/share/Steam' \
    --exclude '/home/jack/go' \
    --exclude '/home/jack/.rvm' \
    --exclude '/home/jack/.npm' \
    --exclude '/home/jack/.node-gyp' \
    --exclude '/home/jack/.cargo' \
    --exclude '/home/jack/.cache' \
    --exclude '/home/jack/.config/google-chrome-backup-*' \
    --exclude '/home/jack/Downloads' \
    /home "${DEST_HOME}"
)

# -------------------------------
echo '(7) Clear old /home backups'
time (
  rdiff-backup \
    --remote-schema "ssh -C -p${BACKUP_SSH_PORT} %s rdiff-backup --server" \
    --remove-older-than ${CLEAR_HOME_AFTER} \
    --force \
    "${DEST_HOME}"
)
